# Generated by Django 4.1.7 on 2023-04-28 14:12

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Diet_Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diet_choice', models.CharField(choices=[('Choose', 'Choose'), ('Low Carb Diet', 'Low Carb Diet'), ('High Carb Diet', 'High Carb Diet'), ('Keto Diet', 'Keto Diet'), ('Balanced Diet', 'Balanced Diet'), ('Zone Diet', 'Zone Diet'), ('Depletion Diet', 'Depletion Diet')], default='Choose', max_length=50)),
                ('diet_food_choice', models.CharField(choices=[('Choose', 'Choose'), ('Vegetarian', 'Vegetarian'), ('Non Vegetarian', 'Non Vegetarian')], default='Choose', max_length=50)),
                ('diet_breakfast', ckeditor.fields.RichTextField()),
                ('diet_lunch', ckeditor.fields.RichTextField()),
                ('diet_dinner', ckeditor.fields.RichTextField()),
                ('diet_snacks', ckeditor.fields.RichTextField()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist_Check',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_email', models.CharField(max_length=100)),
                ('exercise_jj', models.IntegerField(default=0)),
                ('exercise_ac', models.IntegerField(default=0)),
                ('exercise_kp', models.IntegerField(default=0)),
                ('exercise_sar', models.IntegerField(default=0)),
                ('exercise_squats', models.IntegerField(default=0)),
                ('exercise_bl', models.IntegerField(default=0)),
                ('exercise_cs', models.IntegerField(default=0)),
                ('current_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User_Exercise_Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=500)),
                ('exercise_name', models.CharField(max_length=500)),
                ('exercise_count', models.IntegerField(default=0)),
                ('exercise_duration', models.FloatField(default=0)),
                ('exercise_calorie_burnt', models.FloatField(default=0)),
                ('exercise_weight_loss', models.FloatField(default=0)),
                ('current_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='User_Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_gender', models.CharField(max_length=50)),
                ('user_focus_area', models.CharField(max_length=100)),
                ('user_name', models.CharField(max_length=500)),
                ('user_email', models.CharField(max_length=100)),
                ('user_age', models.IntegerField(default=0)),
                ('user_blood_group', models.CharField(max_length=50)),
                ('user_height_ft', models.IntegerField(default=0)),
                ('user_height_in', models.IntegerField(default=0)),
                ('user_height', models.FloatField(default=0)),
                ('user_weight', models.FloatField(default=0)),
                ('user_activity_level', models.CharField(max_length=100)),
                ('user_bmi', models.FloatField(default=0)),
                ('user_bmr', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('gender', models.CharField(max_length=20, null=True)),
                ('pincode', models.CharField(blank=True, max_length=6, null=True)),
                ('location', models.CharField(max_length=30, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('fav_gym_act1', models.CharField(max_length=255, null=True)),
                ('fav_gym_act2', models.CharField(max_length=255, null=True)),
                ('dob', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
